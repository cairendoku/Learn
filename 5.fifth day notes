1.在 CSS 中，所有的元素都被一个个的“盒子（box）”包围着，块级盒子（Block box） 和 内联盒子（Inline box）最为常见
2.这两种盒子会在页面流（page flow）和元素之间的关系方面表现出不同的行为：
一个被定义成块级的（block）盒子会表现出以下行为:
1）盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽
2）每个盒子都会换行
3）width 和 height 属性可以发挥作用
4）内边距（padding）, 外边距（margin） 和 边框（border） 会将其他元素从当前盒子周围“推开
一个被定义成内联的（inline）盒子行为如下:
1）盒子不会产生换行
2）width 和 height 属性将不起作用
3）垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 inline 状态的盒子推开
4）水平方向的内边距、外边距以及边框会被应用而且也会把其他处于 inline 状态的盒子推开
除非特殊指定，诸如标题(<h1>等)和段落(<p>)默认情况下都是块级的盒子
用做链接的 <a> 元素、 <span>、 <em> 以及 <strong> 都是默认处于 inline 状态的
3.盒子内部显示类型
定义块级盒子显示类型display: block
定义内联盒子显示类型display: inline
display: inline-flex将在容器中建立一个flex布局，但是每个列表是一个块级元素 —— 像段落一样 —— 会充满整个容器的宽度并且换行
4.CSS中组成一个块级盒子需要:
Content box: 这个区域是用来显示内容，大小可以通过设置 width 和 height
Padding box: 包围在内容区域外部的空白区域； 大小通过 padding 相关属性设置
Border box: 边框盒包裹内容和内边距。大小通过 border 相关属性设置
Margin box: 这是最外面的区域，是盒子和其他元素之间的空白区域。大小通过 margin 相关属性设置
5.标准盒模型：宽度 = 410px (350 + 25 + 25 + 5 + 5)，高度 = 210px (150 + 25 + 25 + 5 + 5)，padding 加 border 再加 content box
6.替代（IE）盒模型：box-sizing: border-box
7.外边距margin：外边距是盒子周围一圈看不到的空间，它会把其他元素从盒子旁边推开
外边距折叠：如果你有两个外边距相接的元素，这些外边距将合并为一个外边距，即最大的单个外边距的大小
8.边框border：边框是在边距和填充框之间绘制的，标准盒模型下边框的大小将添加到框的宽度和高度，替代盒模型下，边框的大小会使内容框更小，它会占用一些可用的宽度和高度
9.内边距padding：内边距位于边框和内容区域之间，值必须是0或正的值，应用于元素的任何背景都将显示在内边距后面，内边距通常用于将内容推离边框
10.display: inline-block 实现块级的部分效果：
1）设置width 和height 属性会生效
2）padding, margin, 以及border 会推开其他元素
11.弹性盒子flex，display:flex
当元素表现为 flex 框时，它们沿着两个轴来布局：
1）主轴（main axis）是沿着 flex 元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列），该轴的开始和结束被称为 main start 和 main end
2）交叉轴（cross axis）是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为 cross start 和 cross end
设置了 display: flex 的父元素被称之为 flex 容器（flex container），在 flex 容器中表现为弹性（flexible）的盒子的元素被称之为 flex 项（flex item）
flex-direction设置主轴方向，row为行，column为列，row-reverse 和 column-reverse 值反向排列 flex 项目
flex-wrap设置换行
flex-flow: row wrap同时设置主轴方向和换行
flex: 1 200px设置flex项的动态尺寸，1为无单位比例大小，200px为最小值
flex 是一个可以指定最多三个不同值的缩写属性：
1）无单位比例，可以单独指定全写 flex-grow 属性的值
2）flex-shrink 一般用于溢出容器的 flex 项，这指定了从每个 flex 项中取出多少溢出量，以阻止它们溢出它们的容器
3）最小值，可以单独指定全写 flex-basis 属性的值
align-items 控制 flex 项在交叉轴上的位置
align-self 属性覆盖 align-items 的行为
justify-content 控制 flex 项在主轴上的位置
flex项排序：
1）所有 flex 项默认的 order 值是 0
2）order 值大的 flex 项比 order 值小的在显示顺序中更靠后
3）相同 order 值的 flex 项按源顺序显示。所以假如你有四个元素，其 order 值分别是2，1，1和0，那么它们的显示顺序就分别是第四，第二，第三，和第一
4）第三个元素显示在第二个后面是因为它们的 order 值一样，且第三个元素在源顺序中排在第二个后面
